name: publish
on:
  pull_request:
    branches:
      - master
    types: [closed]

jobs:
  publish:
    name: Publish
    runs-on: ubuntu-18.04
    steps:
      # Checkout Project
      - name: üìö Checkout
        uses: actions/checkout@v2

       # Setup NodeJS
      - name: üü¢ Setup Node ${{ matrix.node_version }}
        uses: actions/setup-node@v1
        with:
          node-version: 12

        # Install Dependencies
      - name: ‚è≥ Install
        run: yarn install

        # Configure Git User so that it can perform Git Actions like commits
      - name: üë∑ Configure Git User
        run: |
          git config --global user.name 'bennodev19'
          git config --global user.email 'bennodev19@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Define ${CURRENT_VERSION}
      - name: üîë Set Current Version
        shell: bash -ex {0}
        run: |
          CURRENT_VERSION=$(node -p 'require("./lerna.json").version')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

        # Check if Tag with the CURRENT_VERSION already exists
      - name: Tag Check
        id: tag-check
        shell: bash -ex {0}
        run: |
          GET_API_URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/git/ref/tags/v${CURRENT_VERSION}"
          http_status_code=$(curl -LI $GET_API_URL -o /dev/null -w '%{http_code}\n' -s \
            -H "Authorization: token ${GITHUB_TOKEN}")
          if [ "$http_status_code" -ne "404" ] ; then
            echo "::set-output name=exists_tag::true"
          else
            echo "::set-output name=exists_tag::false"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # Create Git Tag if Tag doesn't already exists
      - name: üè∑ Create Git Tag
        if: steps.tag-check.outputs.exists_tag == 'false'
        uses: azu/action-package-version-to-git-tag@v1
        with:
          version: ${{ env.CURRENT_VERSION }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "v"

        # Create Release
      - name: üìù Create Release
        id: create-release
        if: steps.tag-check.outputs.exists_tag == 'false' && github.event.pull_request.merged == true
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.CURRENT_VERSION }}
          # Copy Pull Request's tile and body to Release Note
          release_name: ${{ github.event.pull_request.title }}
          body: |
            ${{ github.event.pull_request.body }}
          draft: false
          prerelease: false

        # Publish
      - name: üöÄ Publish
        if: steps.tag-check.outputs.exists_tag == 'false'
        run: |
          yarn lerna publish from-package --yes
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
      - uses: actions/github-script@0.8.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'https://github.com/${{ github.repository }}/releases/tag/v${{ env.CURRENT_VERSION }} is released üéâ'
            })
